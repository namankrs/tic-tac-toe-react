{"version":3,"sources":["serviceWorker.js","Square.js","Board.js","Game.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","react_default","a","createElement","className","onClick","this","props","value","React","Component","Board","id","_this","src_Square","squares","renderSquare","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","stepNumber","xIsNext","_this2","current","winner","hasWon","status","concat","includes","moves","map","step","move","desc","key","jumpTo","src_Board","i","handleClick","slice","length","setState","winningCombinations","_winningCombinations$","slicedToArray","b","c","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b073021.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport \"./index.css\";\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <button className=\"square\" onClick={this.props.onClick}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\nimport \"./index.css\";\n\nclass Board extends React.Component {\n  renderSquare(id) {\n    return (\n      <Square\n        value={this.props.squares[id]}\n        onClick={() => this.props.onClick(id)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"rows\">\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./index.css\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{ squares: Array(9).fill(null) }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = this.hasWon(current.squares);\n    let status = `Next Player:${this.state.xIsNext ? \"X\" : \"O\"}`;\n    if (!current.squares.includes(null)) {\n      status = \"Match draw\";\n    }\n    if (winner) {\n      status = `${winner} has won the game`;\n    }\n\n    const moves = history.map((step, move) => {\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} onClick={i => this.handleClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n\n  handleClick(id) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (this.hasWon(squares) || !(squares[id] == null)) return;\n    squares[id] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{ squares: squares }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  hasWon(squares) {\n    const winningCombinations = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n\n    for (let i = 0; i < winningCombinations.length; i++) {\n      const [a, b, c] = winningCombinations[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Game from \"./Game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}